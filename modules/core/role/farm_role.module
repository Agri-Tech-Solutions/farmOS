<?php

/**
 * @file
 * Hooks implemented by the Farm Role module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\Role;

/**
 * Implements hook_entity_type_alter().
 */
function farm_role_entity_type_alter(array &$entity_types) {

  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */

  // Replace the storage handler class for Roles.
  $entity_types['user_role']
    ->setHandlerClass('storage', 'Drupal\farm_role\FarmRoleStorage');
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function farm_role_form_user_admin_permissions_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Attach managed role CSS.
  $form['#attached']['library'][] = 'farm_role/managed_role';

  // Save the role names.
  $role_names = array_keys($form['role_names']['#value']);

  // Load roles.
  /** @var \Drupal\user\RoleInterface[] $roles */
  $roles = Role::loadMultiple($role_names);

  // Get the managed role permissions service.
  /** @var \Drupal\farm_role\ManagedRolePermissionsManagerInterface $managed_role_manager */
  $managed_role_manager = \Drupal::service('plugin.manager.managed_role_permissions');

  // Save a list of managed roles and their permissions.
  $managed_roles = [];
  foreach ($roles as $role) {
    if ($managed_role_manager->isManagedRole($role)) {

      // Calculate the index of the role as displayed in the form.
      $index = array_search($role->id(), $role_names);

      // Save the role name.
      $managed_roles[$index] = $role->id();
    }
  }

  // Append '(managed)' to managed role labels in the table header.
  foreach ($managed_roles as $index => $role) {

    // Offset by 1 for the first table column.
    $offset = $index + 1;

    // Build new label.
    $label = $form['permissions']['#header'][$offset]['data'];
    $new = $label . ' (' . t('managed') . ')';

    // Set new label.
    $form['permissions']['#header'][$offset]['data'] = $new;
  }

  // Get a list of permissions.
  $permissions = \Drupal::service('user.permissions')->getPermissions();
  $permission_names = array_keys($permissions);

  // Iterate over each permission in the form.
  foreach ($form['permissions'] as $name => $permission) {

    // Only check permission arrays, skip high level form and wrapper elements.
    if (in_array($name, $permission_names)) {

      // Iterate over each role under the permission.
      foreach (array_keys($permission) as $rid) {

        // If this is a managed role...
        if (in_array($rid, $managed_roles)) {

          // Disable the checkbox.
          $form['permissions'][$name][$rid]['#disabled'] = TRUE;

          // If the permission is enabled on the role, add CSS class.
          if ($managed_role_manager->isPermissionInRole($name, $roles[$rid])) {
            $form['permissions'][$name][$rid]['#attributes']['class'][] = 'managed';
          }
        }
      }
    }
  }
}
