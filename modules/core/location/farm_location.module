<?php

/**
 * @file
 * Contains farm_location.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\farm_location\AssetGeometryItemList;
use Drupal\log\Entity\LogInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function farm_location_log_presave(LogInterface $log) {

  // Load the log.location service.
  /** @var Drupal\farm_location\LogLocationInterface $log_location */
  $log_location = \Drupal::service('log.location');

  // If the log does not reference any location assets, we will have nothing
  // to copy from, so do nothing.
  if (!$log_location->hasLocation($log)) {
    return;
  }

  // If this is a new log and it has a geometry, do nothing.
  if (empty($log->original) && $log_location->hasGeometry($log)) {
    return;
  }

  // If this is an update to an existing log...
  if (!empty($log->original)) {

    // If the original log has a custom geometry, do nothing.
    if ($log_location->hasCustomGeometry($log->original)) {
      return;
    }

    // If the geometry has changed (and it has not been made empty), do nothing.
    $old_geometry = $log_location->getGeometry($log->original);
    $new_geometry = $log_location->getGeometry($log);

    // If the new geometry is not empty, do nothing.
    if ($old_geometry != $new_geometry && !empty($new_geometry)) {
      return;
    }
  }

  // Populate the log geometry from the location geometry.
  $log_location->populateGeometryFromLocation($log);
}

/**
 * Implements hook_entity_base_field_info().
 */
function farm_location_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add fields to assets.
  if ($entity_type->id() == 'asset') {

    // Geometry field.
    // This is added as a bundle field definition to all asset types rather than
    // a base field definition so that data is stored in a dedicated database
    // table.
    // @todo Hide this from the entity display, use current_geometry instead?
    $options = [
      'type' => 'geofield',
      'label' => t('Geometry'),
      'description' => t('Add geometry data to this asset to describe its intrinsic location.'),
      'weight' => [
        'form' => 95,
        'view' => 95,
      ],
    ];
    $fields['geometry'] = \Drupal::service('farm_field.factory')->bundleFieldDefinition($options);

    // Current geometry field.
    // This is computed based on an asset's movements or its intrinsic geometry.
    $options = [
      'type' => 'geofield',
      'label' => t('Current geometry'),
      'computed' => AssetGeometryItemList::class,
      'hidden' => 'form',
      'weight' => [
        'view' => 95,
      ],
    ];
    $fields['current_geometry'] = \Drupal::service('farm_field.factory')->baseFieldDefinition($options);

    // Location boolean field.
    $options = [
      'type' => 'boolean',
      'label' => t('Location'),
      'description' => t('If this asset is a location, then other assets can be moved to it.'),
      'default_value_callback' => 'farm_location_default_value',
      'weight' => [
        'form' => 95,
        'view' => 95,
      ],
    ];
    $fields['location'] = \Drupal::service('farm_field.factory')->baseFieldDefinition($options);
  }

  // Add fields to logs.
  if ($entity_type->id() == 'log') {

    // Geometry field.
    // This is added as a bundle field definition to all log types rather than
    // a base field definition so that data is stored in a dedicated database
    // table.
    $options = [
      'type' => 'geofield',
      'label' => t('Geometry'),
      'description' => t('Add geometry data to this log to describe where it took place.'),
      'weight' => [
        'form' => 95,
        'view' => 95,
      ],
    ];
    $fields['geometry'] = \Drupal::service('farm_field.factory')->bundleFieldDefinition($options);

    // Location asset reference field.
    $options = [
      'type' => 'entity_reference',
      'label' => t('Location'),
      'description' => t('Where does this take place?'),
      'target_type' => 'asset',
      'multiple' => TRUE,
      'weight' => [
        'form' => 90,
        'view' => 90,
      ],
    ];
    $field = \Drupal::service('farm_field.factory')->baseFieldDefinition($options);
    $field->setSetting('handler', 'views');
    $field->setSetting('handler_settings', [
      'view' => [
        'view_name' => 'farm_location_reference',
        'display_name' => 'entity_reference',
      ],
    ]);
    $fields['location'] = $field;

    // Movement boolean field.
    $options = [
      'type' => 'boolean',
      'label' => t('Movement'),
      'description' => t('If this log is a movement, then all assets referenced by it will be located in the referenced locations and/or geometry at the time the log takes place. The log must be complete in order for the movement to take effect.'),
      'default_value_callback' => 'farm_location_movement_default_value',
      'weight' => [
        'form' => 95,
        'view' => 95,
      ],
    ];
    $fields['movement'] = \Drupal::service('farm_field.factory')->baseFieldDefinition($options);
  }

  return $fields;
}

/**
 * Sets the default value for asset location boolean field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function farm_location_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition): array {
  $default = FALSE;

  // Land, structure, and water assets are locations by default.
  if (in_array($entity->bundle(), ['land', 'structure', 'water'])) {
    $default = TRUE;
  }

  return [
    ['value' => $default],
  ];
}

/**
 * Sets the default value for log movement boolean field.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function farm_location_movement_default_value(ContentEntityInterface $entity, FieldDefinitionInterface $definition): array {
  $default = FALSE;

  // Seeding and transplanting logs are movements by default.
  if (in_array($entity->bundle(), ['seeding', 'transplanting'])) {
    $default = TRUE;
  }

  return [
    ['value' => $default],
  ];
}
