<?php

/**
 * @file
 * The farmOS Flags module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\farm_flag\Form\EntityFlagActionForm;
use Drupal\farm_flag\Routing\EntityFlagActionRouteProvider;

/**
 * Implements hook_entity_base_field_info().
 */
function farm_flag_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add flag field to farmOS entities.
  if (in_array($entity_type->id(), ['asset', 'log', 'plan'])) {
    $field_info = [
      'type' => 'list_string',
      'label' => t('Flags'),
      'description' => t('Add flags to enable better sorting and filtering of records.'),
      'allowed_values_function' => 'farm_flag_field_allowed_values',
      'multiple' => TRUE,
      'weight' => [
        'form' => -75,
        'view' => -75,
      ],
    ];
    $fields['flag'] = \Drupal::service('farm_field.factory')->baseFieldDefinition($field_info);
  }

  return $fields;
}

/**
 * Allowed values callback function for the flags field.
 *
 * @return array
 *   Returns an array of allowed values for use in form select options.
 */
function farm_flag_field_allowed_values() {
  /** @var \Drupal\farm_flag\Entity\FarmFlagInterface[] $flags */
  $flags = \Drupal::entityTypeManager()->getStorage('flag')->loadMultiple();
  $allowed_values = [];
  foreach ($flags as $id => $flag) {
    $allowed_values[$id] = $flag->getLabel();
  }
  return $allowed_values;
}

/**
 * Implements hook_theme().
 */
function farm_flag_theme() {
  return [
    'field__flag' => [
      'base hook' => 'field',
    ],
  ];
}

/**
 * Prepares variables for field--flag templates.
 *
 * Adds classes to each flag wrapper.
 *
 * Default template: field--flag.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing render arrays for the list of
 *     flags.
 */
function template_preprocess_field__flag(array &$variables) {

  // Preprocess list_string flag fields.
  if ($variables['element']['#field_type'] == 'list_string') {

    /** @var \Drupal\Core\Field\FieldItemListInterface $items */
    $items = $variables['element']['#items'];

    // Add classes to each flag.
    foreach ($items as $key => $list_item) {
      $classes = ['flag', 'flag--' . $list_item->getString()];
      $variables['items'][$key]['attributes']->addClass($classes);
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function farm_flag_entity_type_build(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */

  // Enable the entity flag action on entity types with a flag field.
  foreach (['asset', 'log', 'plan'] as $entity_type) {
    if (!empty($entity_types[$entity_type])) {
      $route_providers = $entity_types[$entity_type]->getRouteProviderClasses();
      $route_providers['flag'] = EntityFlagActionRouteProvider::class;
      $entity_types[$entity_type]->setHandlerClass('route_provider', $route_providers);
      $entity_types[$entity_type]->setLinkTemplate('flag-action-form', '/' . $entity_type . '/flag');
      $entity_types[$entity_type]->setFormClass('flag-action-form', EntityFlagActionForm::class);
    }
  }
}
